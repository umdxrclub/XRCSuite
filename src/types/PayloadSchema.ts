/* tslint:disable */
/**
 * This file was automatically generated by Payload CMS.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lab".
 */
export interface Lab {
  id: string;
  open?: boolean;
  event?: string | Event;
  members?: string[] | Member[];
  schedule?: string | Schedule;
  odoo: {
    contractId?: number;
  };
  settings: {
    notifyStatus?: boolean;
    notifyLeadershipCheckInOut?: boolean;
    leadershipRolesToNotify?: (
      | 'President'
      | 'Vice President'
      | 'Treasurer'
      | 'Engagement Director'
      | 'Lab Manager'
      | 'Mentor'
      | 'Graphic Designer'
      | 'Event Coordinator'
      | 'Web Developer'
      | 'Marketing Director'
      | 'Video Producer'
    )[];
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  name?: string;
  type?: 'Workshop' | 'Interest Meeting' | 'Speaker Event' | 'Game Night' | 'Tournament' | 'Field Trip' | 'Other';
  location?: string;
  startDate?: string;
  endDate?: string;
  imageUrl?: string;
  description?: string;
  terplink: {
    eventId?: string;
    accessCode?: string;
  };
  discord: {
    eventId?: string;
    messageId?: string;
  };
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "members".
 */
export interface Member {
  id: string;
  name?: string;
  nickname?: string;
  birthday?: string;
  email?: string;
  isClubMember?: boolean;
  leadershipRoles?: (
    | 'President'
    | 'Vice President'
    | 'Treasurer'
    | 'Engagement Director'
    | 'Lab Manager'
    | 'Mentor'
    | 'Graphic Designer'
    | 'Event Coordinator'
    | 'Web Developer'
    | 'Marketing Director'
    | 'Video Producer'
  )[];
  profile: {
    picture?: string | Media;
    links: {
      type?: 'LinkedIn' | 'GitHub' | 'Website' | 'Twitter' | 'Twitch' | 'YouTube' | 'Discord' | 'Steam' | 'Meta';
      url?: string;
      id?: string;
    }[];
    bio?: string;
  };
  umd: {
    directoryId?: string;
    cardSerial?: string;
    terplink: {
      accountId?: string;
      issuanceId?: string;
      communityId?: string;
    };
  };
  integrations: {
    discord?: string;
    oculus?: string;
    steam?: string;
    scoresaber?: string;
  };
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  isPublic?: boolean;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "schedules".
 */
export interface Schedule {
  id: string;
  name?: string;
  time: (
    | {
        day?: 'Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday';
        allday?: boolean;
        from?: string;
        to?: string;
        reason?: string;
        id?: string;
        blockName?: string;
        blockType: 'Closing';
      }
    | {
        day?: 'Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday';
        allday?: boolean;
        from?: string;
        to?: string;
        staff?: string[] | Member[];
        id?: string;
        blockName?: string;
        blockType: 'Opening';
      }
  )[];
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bot".
 */
export interface Bot {
  id: string;
  enabled?: boolean;
  auth: {
    clientId?: string;
    clientSecret?: string;
    token?: string;
  };
  guild: {
    guildId?: string;
    channels: {
      announcements?: string;
      notifications?: string;
      audit?: string;
      events?: string;
    };
    roles: {
      lab?: string;
      workshop?: string;
      project?: string;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cas".
 */
export interface Ca {
  id: string;
  username?: string;
  password?: string;
  duoDeviceName?: string;
  hotpSecret?: string;
  hotpCounter?: number;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wishlist".
 */
export interface Wishlist {
  id: string;
  wishlist: {
    type?: string | Description;
    quantity?: number;
    id?: string;
  }[];
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "descriptions".
 */
export interface Description {
  id: string;
  name: string;
  image?: string | Media;
  type: 'h_vr' | 'h_ar' | 'h_xr' | 'h_pc' | 'h_laptop' | 'h_phone' | 's_game' | 's_software';
  description?: {
    [k: string]: unknown;
  }[];
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gatekeeper".
 */
export interface Gatekeeper {
  id: string;
  acceptSound?: string | Media;
  rejectSound?: string | Media;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admins".
 */
export interface Admin {
  id: string;
  email?: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  loginAttempts?: number;
  lockUntil?: string;
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "devices".
 */
export interface Device {
  id: string;
  description: string | Description;
  status: 'requested' | 'denied' | 'pending' | 'inLab' | 'checkedOut';
  public: boolean;
  info: {
    serial?: string;
    umdSerial?: string;
    mac?: string;
  };
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "heartbeats".
 */
export interface Heartbeat {
  id: string;
  device?: string | Device;
  date?: string;
  /**
   * @minItems 2
   * @maxItems 2
   */
  location?: [number, number];
  battery: {
    level?: number;
    charging?: boolean;
  };
  network: {
    ipAddress?: string;
    wifi: {
      current: {
        ssid?: string;
        bssid?: string;
        level?: number;
      };
      nearbyNetworks: {
        ssid?: string;
        bssid?: string;
        level?: number;
        id?: string;
      }[];
    };
  };
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "attendances".
 */
export interface Attendance {
  id: string;
  member?: string | Member;
  date?: string;
  event?: string | Event;
  type?: 'in' | 'out';
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "announcements".
 */
export interface Announcement {
  id: string;
  title?: string;
  content?: {
    [k: string]: unknown;
  }[];
  sentMessages: {
    messageId?: string;
    id?: string;
  }[];
  _status?: 'draft' | 'published';
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "software".
 */
export interface Software {
  id: string;
  type?: string | Description;
  publish?: boolean;
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  name?: string;
  status?: 'Proposed' | 'Active' | 'Inactive' | 'Finished';
  projectLeads?: string[] | Member[];
  members?: string[] | Member[];
  logo?: string | Media;
  banner?: string | Media;
  gallery: {
    image?: string | Media;
    description?: string;
    id?: string;
  }[];
  startDate?: string;
  endDate?: string;
  description?: {
    [k: string]: unknown;
  }[];
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "polls".
 */
export interface Poll {
  id: string;
  title?: string;
  open?: boolean;
  allowRevote?: boolean;
  author?: string;
  messages: {
    channel?: string;
    msg?: string;
    id?: string;
  }[];
  choices: {
    name?: string;
    voters: {
      id?: string;
    }[];
    id?: string;
  }[];
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "stats".
 */
export interface Stat {
  id: string;
  date?: string;
  count: {
    discord?: number;
    terplink?: number;
    youtube?: number;
    instagram?: number;
    twitter?: number;
  };
  createdAt: string;
  updatedAt: string;
}
